-- MySQL Script generated by MySQL Workbench
-- dom 11 fev 2024 00:09:50
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`user` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nick` VARCHAR(45) NOT NULL,
  `senha` VARCHAR(80) NULL,
  `email` VARCHAR(90) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE)
ENGINE = InnoDB
COMMENT = 'Uma tabela simples que representa o jogador/usuário. É composta por:\n- id: Identificador único do jogador.\n- nick: Nome de usuário.\n- senha: Senha do jogador.\n- email: Endereço de e-mail do jogador.\n\n';


-- -----------------------------------------------------
-- Table `mydb`.`jogador`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`jogador` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `partida_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `cronometro` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_jogador_partida1_idx` (`partida_id` ASC) VISIBLE,
  INDEX `fk_jogador_user1_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_jogador_partida1`
    FOREIGN KEY (`partida_id`)
    REFERENCES `mydb`.`partida` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_jogador_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `mydb`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`partida`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`partida` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `vencedor` INT NULL,
  `vez` INT NOT NULL,
  `startDate` DATETIME NOT NULL DEFAULT now(),
  `endDate` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `fk_partida_jogador1_idx` (`vencedor` ASC) VISIBLE,
  CONSTRAINT `fk_partida_jogador1`
    FOREIGN KEY (`vencedor`)
    REFERENCES `mydb`.`jogador` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_partida_jogador2`
    FOREIGN KEY (`vencedor`)
    REFERENCES `mydb`.`jogador` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Armazena a maioria das informações de uma partida.\n- id: Identificador único da partida.\n- Vencedor: ID do jogador que venceu a partida (nulo em caso de empate).\n- Vez: ID do jogador que fará a próxima jogada.\n- Relogio: Segundos disponíveis para o jogador realizar sua jogada (o relógio é resetado a cada jogada).\n- start_DT e end_DT: Data e hora de início e término da partida.\n\n';


-- -----------------------------------------------------
-- Table `mydb`.`fila`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`fila` (
  `user_id` INT NOT NULL,
  `pareando` TINYINT NOT NULL DEFAULT 0,
  `tempDeEspera` DATETIME NOT NULL,
  PRIMARY KEY (`user_id`),
  CONSTRAINT `fk_fila_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `mydb`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Uma tabela para gerenciar a fila de pareamento. É composta por:\n- id: Identificador único da entrada na fila.\n- player_id: ID do jogador na fila.\n- inicio_espera: Data e hora de entrada na fila.\n- fim_espera: Data e hora de saída da fila.\n\nInformações adicionais:\nO backend deve emparelhar os dois jogadores que estão na fila há mais tempo (com a data mais antiga de entrada), e antes da partida iniciar ele sai da fila.\n\n';


-- -----------------------------------------------------
-- Table `mydb`.`peça`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`peça` (
  `id` INT NOT NULL,
  `jogador_id` INT NOT NULL,
  `co_X` INT NOT NULL,
  `co_Y` INT NOT NULL,
  `rainha` TINYINT NOT NULL DEFAULT 0,
  `capturada` TINYINT NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `fk_peça_jogador1_idx` (`jogador_id` ASC) VISIBLE,
  CONSTRAINT `fk_peça_jogador1`
    FOREIGN KEY (`jogador_id`)
    REFERENCES `mydb`.`jogador` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Representa a relação muitos para muitos entre peças, jogadores e partidas.\n- pecas_id: ID da peça.\n- player_id: ID do jogador.\n- partida_id: ID da partida.';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
